#ifndef __CDM_H__
#define __CDM_H__

#include<Rcpp.h>
using namespace Rcpp;

// Files 'cdm.h' and 'cdm.cpp' provide classes and methods
// for cohort data models for individual datasets. Prefix 'CdmNoreg'
// is used with cohort data models that do not have a region dimension,
// and prefix 'CmdWithreg' is used with cohort data models that do
// have region dimensions.
//
// Function 'calc_loglik' takes a vector of true values for a demographic
// series (eg true population counts), plus an index stating which
// interval is being estimated, and returns log-likelihoods for
// the associated value in the dataset. The case where 'counts_true'
// is zero receives special treatment: we allow for the possibility of
// non-zero observed counts, governed by parameter 'obs_zero'.
//
// Function 'fill_counts_true' imputes values for the 'i_interval'th
// interval in 'counts_true', based on the cohort data model and dataset.
// 'fill_counts_true' modifies 'counts_true' in place. 'count_true'
// is true values for a demographic series, eg population.
//
// Function 'fill_logimp' calculates log importance probabilties
// ie the probability that a give value will be generated by
// 'fill_counts_true'. Function 'fill_logimp' modifies the
// 'logimp' value in place. 
//
// Suffix 'Poibin' refers to data models based on Poisson-binomial mixtures.
//
// Suffix 'Nbinom' refers to data models based on the negative
// binomial distribution.
//
// Suffix 'Norm' refers to data models based on the negative
// binomial distribution.


class CdmNoregBase {
public:
  virtual ~CdmNoregBase() = default;
  
  virtual NumericVector calc_loglik(NumericVector& counts_true,
				    int i_interval,
				    double obs_zero) = 0;
  
  virtual void fill_counts_true(NumericVector& counts_true,
				int i_interval) = 0;
  
  virtual void fill_logimp(NumericVector& logimp,
                           NumericVector& counts_true,
			   int i_interval) = 0;
};


RCPP_EXPOSED_CLASS(CdmNoregBase)

class CdmWithregBase {
  public:
    virtual ~CdmWithregBase() = default;

    virtual NumericVector calc_loglik(NumericMatrix& counts_true,
				      int i_interval,
				      double obs_zero) = 0;
    
    virtual void fill_counts_true(NumericMatrix& counts_true,
				  int i_interval) = 0;
    
    virtual void fill_logimp(NumericMatrix& logimp,
			     NumericMatrix& counts_true,
			     int i_interval) = 0;
};

RCPP_EXPOSED_CLASS(CdmWithregBase)


class CdmNoregPoibin : public CdmNoregBase {
public:
  CdmNoregPoibin(NumericVector counts_data, double prob);
  
  NumericVector calc_loglik(NumericVector& counts_true,
			    int i_interval,
			    double obs_zero);
  
  void fill_counts_true(NumericVector& counts_true,
			int i_interval);
  
  void fill_logimp(NumericVector& logimp,
                   NumericVector& counts_true,
                   int i_interval);
  
  NumericVector counts_data;

  double prob;
};


RCPP_EXPOSED_CLASS(CdmNoregPoibin)


class CdmWithregPoibin : public CdmWithregBase {
public:
  CdmWithregPoibin(NumericMatrix counts_data, double prob);

  NumericVector calc_loglik(NumericMatrix& counts_true,
			    int i_interval,
			    double obs_zero);
  
  void fill_counts_true(NumericMatrix& counts_true,
			int i_interval);
  
  void fill_logimp(NumericMatrix& logimp,
                   NumericMatrix& counts_true,
                   int i_interval);
  
  int getCountsDataRows();

  NumericMatrix counts_data;

  double prob;
};

RCPP_EXPOSED_CLASS(CdmWithregPoibin)



class CdmNoregNbinom : public CdmNoregBase {
  public:
    CdmNoregNbinom(NumericVector counts_data, NumericVector ratio, NumericVector disp);

    NumericVector calc_loglik(NumericVector& counts_true,
			      int i_interval,
			      double obs_zero);

    void fill_counts_true(NumericVector& counts_true,
			  int i_interval);

    void fill_logimp(NumericVector& logimp,
                     NumericVector& counts_true,
                     int i_interval);

    NumericVector counts_data;
    NumericVector ratio;
    NumericVector disp;
};

RCPP_EXPOSED_CLASS(CdmNoregNbinom)

  
class CdmWithregNbinom : public CdmWithregBase {
  public:
    CdmWithregNbinom(NumericMatrix counts_data, NumericMatrix ratio, NumericMatrix disp);

    NumericVector calc_loglik(NumericMatrix& counts_true,
			      int i_interval,
			      double obs_zero);

    void fill_counts_true(NumericMatrix& counts_true, int i_interval);

    void fill_logimp(NumericMatrix& logimp,
                     NumericMatrix& counts_true,
                     int i_interval);

    int getCountsDataRows();
    
    NumericMatrix counts_data;

    NumericMatrix ratio;

    NumericMatrix disp;
};

RCPP_EXPOSED_CLASS(CdmWithregNbinom)



class CdmNoregNorm : public CdmNoregBase {
  public:
    CdmNoregNorm(NumericVector counts_data, NumericVector ratio, NumericVector sd);

    NumericVector calc_loglik(NumericVector& counts_true,
			      int i_interval,
			      double obs_zero);

    void fill_counts_true(NumericVector& counts_true,
			  int i_interval);

    void fill_logimp(NumericVector& logimp,
                     NumericVector& counts_true,
                     int i_interval);

    NumericVector counts_data;
    NumericVector ratio;
    NumericVector sd;
};

RCPP_EXPOSED_CLASS(CdmNoregNorm)







#endif //__CDM_H__
