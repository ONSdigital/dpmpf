// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_counts_noreg_inner
void update_counts_noreg_inner(Environment& self, int i_interval);
RcppExport SEXP _dpmpf_update_counts_noreg_inner(SEXP selfSEXP, SEXP i_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type i_interval(i_intervalSEXP);
    update_counts_noreg_inner(self, i_interval);
    return R_NilValue;
END_RCPP
}
// update_counts_withreg_inner
void update_counts_withreg_inner(Environment& self, int i_interval);
RcppExport SEXP _dpmpf_update_counts_withreg_inner(SEXP selfSEXP, SEXP i_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment& >::type self(selfSEXP);
    Rcpp::traits::input_parameter< int >::type i_interval(i_intervalSEXP);
    update_counts_withreg_inner(self, i_interval);
    return R_NilValue;
END_RCPP
}
// dpoibin1
double dpoibin1(double x, double size, double prob, bool use_log);
RcppExport SEXP _dpmpf_dpoibin1(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dpoibin1(x, size, prob, use_log));
    return rcpp_result_gen;
END_RCPP
}
// rpoibin1
double rpoibin1(double size, double prob);
RcppExport SEXP _dpmpf_rpoibin1(SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(rpoibin1(size, prob));
    return rcpp_result_gen;
END_RCPP
}
// rpoistr1
double rpoistr1(double lambda, double lower);
RcppExport SEXP _dpmpf_rpoistr1(SEXP lambdaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rpoistr1(lambda, lower));
    return rcpp_result_gen;
END_RCPP
}
// rpoistr
NumericVector rpoistr(int n, NumericVector lambda, NumericVector lower);
RcppExport SEXP _dpmpf_rpoistr(SEXP nSEXP, SEXP lambdaSEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rpoistr(n, lambda, lower));
    return rcpp_result_gen;
END_RCPP
}
// dpoistr
NumericVector dpoistr(NumericVector x, NumericVector lambda, NumericVector lower, bool use_log);
RcppExport SEXP _dpmpf_dpoistr(SEXP xSEXP, SEXP lambdaSEXP, SEXP lowerSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dpoistr(x, lambda, lower, use_log));
    return rcpp_result_gen;
END_RCPP
}
// pnchisq_approx
double pnchisq_approx(double q, double df, double ncp, double lower, bool use_log);
RcppExport SEXP _dpmpf_pnchisq_approx(SEXP qSEXP, SEXP dfSEXP, SEXP ncpSEXP, SEXP lowerSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type ncp(ncpSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(pnchisq_approx(q, df, ncp, lower, use_log));
    return rcpp_result_gen;
END_RCPP
}
// pnchisq_switch
double pnchisq_switch(double q, double df, double ncp, double lower, bool use_log);
RcppExport SEXP _dpmpf_pnchisq_switch(SEXP qSEXP, SEXP dfSEXP, SEXP ncpSEXP, SEXP lowerSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type ncp(ncpSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(pnchisq_switch(q, df, ncp, lower, use_log));
    return rcpp_result_gen;
END_RCPP
}
// pskel1
double pskel1(double q, double mu1, double mu2, bool lower_tail, bool log_p);
RcppExport SEXP _dpmpf_pskel1(SEXP qSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pskel1(q, mu1, mu2, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// pskel
NumericVector pskel(NumericVector q, NumericVector mu1, NumericVector mu2, bool lower_tail, bool log_p);
RcppExport SEXP _dpmpf_pskel(SEXP qSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pskel(q, mu1, mu2, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qskel1
double qskel1(double p, double mu1, double mu2);
RcppExport SEXP _dpmpf_qskel1(SEXP pSEXP, SEXP mu1SEXP, SEXP mu2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    rcpp_result_gen = Rcpp::wrap(qskel1(p, mu1, mu2));
    return rcpp_result_gen;
END_RCPP
}
// rskeltr1
double rskeltr1(double mu1, double mu2, double lower);
RcppExport SEXP _dpmpf_rskeltr1(SEXP mu1SEXP, SEXP mu2SEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rskeltr1(mu1, mu2, lower));
    return rcpp_result_gen;
END_RCPP
}
// rskeltr
DoubleVector rskeltr(int n, DoubleVector mu1, DoubleVector mu2, DoubleVector lower);
RcppExport SEXP _dpmpf_rskeltr(SEXP nSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP lowerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type lower(lowerSEXP);
    rcpp_result_gen = Rcpp::wrap(rskeltr(n, mu1, mu2, lower));
    return rcpp_result_gen;
END_RCPP
}
// dskel1
double dskel1(double x, double mu1, double mu2, bool use_log);
RcppExport SEXP _dpmpf_dskel1(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dskel1(x, mu1, mu2, use_log));
    return rcpp_result_gen;
END_RCPP
}
// dskeltr1
double dskeltr1(double x, double mu1, double mu2, double lower, bool use_log);
RcppExport SEXP _dpmpf_dskeltr1(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP lowerSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dskeltr1(x, mu1, mu2, lower, use_log));
    return rcpp_result_gen;
END_RCPP
}
// dskeltr
NumericVector dskeltr(NumericVector x, NumericVector mu1, NumericVector mu2, NumericVector lower, bool use_log);
RcppExport SEXP _dpmpf_dskeltr(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP lowerSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dskeltr(x, mu1, mu2, lower, use_log));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp_2
NumericVector log_sum_exp_2(NumericVector x, NumericVector y);
RcppExport SEXP _dpmpf_log_sum_exp_2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp_2(x, y));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_cdmnoregpoibin();
RcppExport SEXP _rcpp_module_boot_mod_cdmwithregpoibin();
RcppExport SEXP _rcpp_module_boot_mod_cdmnoregnbinom();
RcppExport SEXP _rcpp_module_boot_mod_cdmwithregnbinom();
RcppExport SEXP _rcpp_module_boot_mod_cdmnoregnorm();
RcppExport SEXP _rcpp_module_boot_mod_cdmsnoreg();
RcppExport SEXP _rcpp_module_boot_mod_cdmswithreg();

static const R_CallMethodDef CallEntries[] = {
    {"_dpmpf_update_counts_noreg_inner", (DL_FUNC) &_dpmpf_update_counts_noreg_inner, 2},
    {"_dpmpf_update_counts_withreg_inner", (DL_FUNC) &_dpmpf_update_counts_withreg_inner, 2},
    {"_dpmpf_dpoibin1", (DL_FUNC) &_dpmpf_dpoibin1, 4},
    {"_dpmpf_rpoibin1", (DL_FUNC) &_dpmpf_rpoibin1, 2},
    {"_dpmpf_rpoistr1", (DL_FUNC) &_dpmpf_rpoistr1, 2},
    {"_dpmpf_rpoistr", (DL_FUNC) &_dpmpf_rpoistr, 3},
    {"_dpmpf_dpoistr", (DL_FUNC) &_dpmpf_dpoistr, 4},
    {"_dpmpf_pnchisq_approx", (DL_FUNC) &_dpmpf_pnchisq_approx, 5},
    {"_dpmpf_pnchisq_switch", (DL_FUNC) &_dpmpf_pnchisq_switch, 5},
    {"_dpmpf_pskel1", (DL_FUNC) &_dpmpf_pskel1, 5},
    {"_dpmpf_pskel", (DL_FUNC) &_dpmpf_pskel, 5},
    {"_dpmpf_qskel1", (DL_FUNC) &_dpmpf_qskel1, 3},
    {"_dpmpf_rskeltr1", (DL_FUNC) &_dpmpf_rskeltr1, 3},
    {"_dpmpf_rskeltr", (DL_FUNC) &_dpmpf_rskeltr, 4},
    {"_dpmpf_dskel1", (DL_FUNC) &_dpmpf_dskel1, 4},
    {"_dpmpf_dskeltr1", (DL_FUNC) &_dpmpf_dskeltr1, 5},
    {"_dpmpf_dskeltr", (DL_FUNC) &_dpmpf_dskeltr, 5},
    {"_dpmpf_log_sum_exp_2", (DL_FUNC) &_dpmpf_log_sum_exp_2, 2},
    {"_rcpp_module_boot_mod_cdmnoregpoibin", (DL_FUNC) &_rcpp_module_boot_mod_cdmnoregpoibin, 0},
    {"_rcpp_module_boot_mod_cdmwithregpoibin", (DL_FUNC) &_rcpp_module_boot_mod_cdmwithregpoibin, 0},
    {"_rcpp_module_boot_mod_cdmnoregnbinom", (DL_FUNC) &_rcpp_module_boot_mod_cdmnoregnbinom, 0},
    {"_rcpp_module_boot_mod_cdmwithregnbinom", (DL_FUNC) &_rcpp_module_boot_mod_cdmwithregnbinom, 0},
    {"_rcpp_module_boot_mod_cdmnoregnorm", (DL_FUNC) &_rcpp_module_boot_mod_cdmnoregnorm, 0},
    {"_rcpp_module_boot_mod_cdmsnoreg", (DL_FUNC) &_rcpp_module_boot_mod_cdmsnoreg, 0},
    {"_rcpp_module_boot_mod_cdmswithreg", (DL_FUNC) &_rcpp_module_boot_mod_cdmswithreg, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_dpmpf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
